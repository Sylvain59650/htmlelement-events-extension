"use strict";

if (typeof htev === "undefined") {
  var htev = {};
}

function isSubElement(parent, item) {
  var it = item;
  while (it.parentNode !== null && it !== parent) {
    it = it.parentNode;
  }
  return it === parent;
}

htev.__clickOutside = function (elem, fn, option, e) {
  if (elem !== e.target) {
    if (isSubElement(elem, e.target)) {
      e.stopImmediatePropagation();
      return;
    }
    if (window.isDef(fn)) {
      fn(e);
    }
  }
};

htev.registerClickOutside = function (elem, fn, option) {
  if (event) {
    event.stopImmediatePropagation();
  }
  option.target = elem;
  document.body.on("click", htev.__clickOutside.bind(event, elem, fn, option), option);
};

htev.unregisterClickOutside = function (elem) {
  var events = document.body.getEventListeners("click");
  if (window.isDef(events)) {
    for (var j = 0; j < events.length; j++) {
      var e = events[j];
      if (!isDef(e.target) || e.target === document.body) {
        document.body.removeEventListener("click", e.listener);
      }
    }
  }
};

if (typeof htev === "undefined") {
  var htev = {};
}

var specialEvents = ["longmousedown", "longkeydown", "nocontextmenu", "clickoutside", "multiclick"];

htev.registerEvent = function (elem, evtName, fn, option) {
  if (evtName === "longmousedown") {
    htev.registerLongMousedown(elem, fn);
  } else if (evtName === "longkeydown") {
    htev.registerLongKeydown(elem, fn);
  } else if (evtName === "nocontextmenu") {
    elem.oncontextmenu = disableContextMenu;
  } else if (evtName === "clickoutside") {
    htev.registerClickOutside(elem, fn, { target: elem });
  } else if (evtName === "multiclick") {
    htev.registerMulticlick(elem, fn, option || false);
  } else {
    elem.addEventListener(evtName, fn, option || false);
  }
};

htev.unregisterEvent = function (elem, evtName, fn) {
  function unregister(elem, evtName, fn) {
    if (window.isDef(fn)) {
      elem.removeEventListener(evtName, fn, false);
    } else {
      var events = elem.getEventListeners(evtName);
      if (window.isDef(events) && window.isDef(events[evtName])) {
        for (var j = 0; j < events[evtName].length; j++) {
          var e = events[evtName][j];
          elem.removeEventListener(evtName, e.listener);
        }
      }
    }
  }
  if (evtName === "nocontextmenu") {
    elem.oncontextmenu = null;
  } else if (evtName === "clickoutside" && document.removeEventListener) {
    htev.unregisterClickOutside(elem);
  } else {
    unregister(elem, evtName, fn);
  }
};

HTMLElement.prototype.on = function (evtName, fn, option) {
  var _this = this;

  if (!window.isDef(fn)) {
    throw TypeError("fn is not defined");
  }
  var evts = evtName.split(" ");
  var cb = fn;

  var _loop = function _loop(i) {
    var evt = evts[i];
    if (_this.addEventListener) {
      if (option && option.once) {
        if (!!document.documentMode || specialEvents.indexOf(evtName) >= 0) {
          self = _this;

          fn.removed = false;

          _oneCall = function oneCall() {
            if (!fn.removed) {
              fn(event);
              fn.removed = true;
            }
            self.off(evt, _oneCall);
          };

          cb = _oneCall;
        }
      }
      htev.registerEvent(_this, evt, cb, option || false);
    } else if (_this.attachEvent) {
      _this.attachEvent("on" + evt, fn);
    }
  };

  for (var i = 0; i < evts.length; i++) {
    var self;

    var _oneCall;

    _loop(i);
  }
};

HTMLElement.prototype.off = function (evtNames, fn) {
  var evts = evtNames.split(" ");
  for (var i = 0; i < evts.length; i++) {
    var _evt = evts[i];
    if (this.removeEventListener) {
      htev.unregisterEvent(this, _evt, fn);
    } else if (this.detachEvent) {
      this.detachEvent("on" + _evt, fn);
    }
  }
};
window.ListenerTracker = {
  isActive: false,
  listeners: [],

  init: function init() {
    if (!window.ListenerTrackerisActive) {
      window.ListenerTracker._super = {
        "addEventListener": HTMLElement.prototype.addEventListener,
        "removeEventListener": HTMLElement.prototype.removeEventListener
      };
    }
    window.ListenerTrackerisActive = true;
  }
};

window.ListenerTracker.init();

Element.prototype.addEventListener = function (type, fn, option) {
  window.ListenerTracker._super.addEventListener.apply(this, arguments);
  window.ListenerTracker.listeners.push({
    type: type,
    listener: fn,
    capture: option && option.capture || false,
    once: option && option.once || false,
    passive: option && option.passive || false,
    target: this
  });
};

Element.prototype.removeEventListener = function (type, fn) {
  window.ListenerTracker._super.removeEventListener.apply(this, arguments);
  var index = -1;
  for (var i = 0; i < window.ListenerTracker.listeners.length; i++) {
    var li = window.ListenerTracker.listeners[i];
    if (li.type === type && li.target === this && (!window.isDef(li.fn) || li.fn === fn)) {
      index = i;
      break;
    }
  }
  if (index >= 0) {
    window.ListenerTracker.listeners.splice(index, 1);
  }
};

Element.prototype.getEventListeners = function (type) {
  var lis = [];
  for (var i = 0; i < window.ListenerTracker.listeners.length; i++) {
    var li = window.ListenerTracker.listeners[i];
    if (li.target === this && (!window.isDef(type) || li.type === type)) {
      lis.push(li);
    }
  }
  return lis;
};
if (typeof htev === "undefined") {
  var htev = {};
}

htev.registerLongMousedown = function (elem, fn, option) {
  if (!window.isDef(fn)) {
    throw TypeError("argument exception");
  }
  var timer = 0;
  elem.on("mousedown", function (e) {
    var cb = function cb() {
      fn(e);
    };
    timer = window.setTimeout(cb, 500);
  });

  elem.on("mouseup", function () {
    window.clearTimeout(timer);
  });
};

htev.registerLongKeydown = function (elem, fn, option) {
  if (!window.isDef(fn)) {
    throw TypeError("argument exception");
  }
  var timer = 0;
  var fired = false;
  elem.on("keydown", function (e) {
    var cb = function cb() {
      if (!fired) {
        fn(e);
        fired = true;
      }
    };
    timer = window.setTimeout(cb, 500);
  });

  elem.on("keyup", function () {
    window.clearTimeout(timer);
    timer = 0;
    fired = false;
  });
};

if (typeof htev === "undefined") {
  var htev = {};
}

htev.registerMulticlick = function (elem, fn, option) {
  if (!window.isDef(fn)) {
    throw TypeError("argument exception");
  }
  var timer = 0;
  var counter = 0;

  function reset() {
    counter = 0;
  }
  elem.on("click", function (e) {
    if (counter >= 2) {
      fn(e);
      counter = 0;
    }
    counter++;
    timer = window.setTimeout(reset, 1000);
  });
};
function disableContextMenu(ev) {
  ev.stopImmediatePropagation();
  ev.cancelBubble = true;
  return false;
}

document.NoContextMenu = function () {
  document.oncontextmenu = disableContextMenu;
};

HTMLElement.prototype.NoContextMenu = function () {
  this.addEventListener("contextmenu", disableContextMenu);
};
NodeList.prototype.on = function (evtName, fn, option) {
  for (var i = 0; i < this.length; i++) {
    var item = this[i];
    item.on(evtName, fn, option);
  }
};

NodeList.prototype.off = function (evtName, fn) {
  for (var i = 0; i < this.length; i++) {
    var item = this[i];
    item.off(evtName, fn);
  }
};
window.on = window.addEventListener;
document.on = document.addEventListener;
window.off = window.removeEventListener;
document.off = document.removeEventListener;

window.isDef = function (obj) {
  return obj !== null && typeof obj !== "undefined";
};
(function () {
  if (typeof window.CustomEvent === "function") {
    return false;
  }

  function CustomEvent(event, params) {
    params = params || { bubbles: false, cancelable: false, detail: undefined };
    var evt = document.createEvent("CustomEvent");
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return evt;
  }
  CustomEvent.prototype = window.Event.prototype;
  window.CustomEvent = CustomEvent;
})();

document.fireEvent = function (eventName, detail) {
  var myEvent = new CustomEvent(eventName, { detail: detail });
  document.dispatchEvent(myEvent);
};