"use strict";

if (typeof htev === "undefined") {
  var htev = {};
}

function isSubElement(parent, item) {
  var it = item;
  while (it.parentNode !== null && it !== parent) {
    it = it.parentNode;
  }
  return it === parent;
}

htev.__clickOutside = function (elem, fn, option, e) {
  if (elem !== e.target) {
    if (isSubElement(elem, e.target)) {
      e.stopImmediatePropagation();
      return;
    }
    fn(e);
  }
};

htev.registerClickOutside = function (elem, fn, option) {
  if (event) {
    event.stopImmediatePropagation();
  }

  option = Object.assign({}, option, { target: elem });
  document.body.on("click", htev.__clickOutside.bind(event, elem, fn, option));
};

htev.unregisterClickOutside = function (elem) {
  var evtName = "click";
  var events = document.body.getEventListeners(document);
  debugger;
  if (window.isDef(events)) {
    for (var j = 0; j < events.length; j++) {
      var e = events[j];
      document.removeEventListener(evtName, e.listener);
    }
  }
};

if (typeof htev === "undefined") {
  var htev = {};
}

var specialEvents = ["longmousedown", "longkeydown", "nocontextmenu", "clickoutside", "multiclick"];

htev.registerEvent = function (elem, evtName, fn, option) {
  if (evtName === "longmousedown") {
    htev.registerLongMousedown(elem, fn);
  } else if (evtName === "longkeydown") {
    htev.registerLongKeydown(elem, fn);
  } else if (evtName === "nocontextmenu") {
    elem.oncontextmenu = disableContextMenu;
  } else if (evtName === "clickoutside") {
    htev.registerClickOutside(elem, fn, option || false);
  } else if (evtName === "multiclick") {
    htev.registerMulticlick(elem, fn, option || false);
  } else {
    elem.addEventListener(evtName, fn, option || false);
  }
};

htev.unregisterEvent = function (elem, evtName, fn) {
  function unregister(elem, evtName, fn) {
    if (window.isDef(fn)) {
      elem.removeEventListener(evtName, fn, false);
    } else {
      var events = window.getEventListeners(elem);
      if (window.isDef(events) && window.isDef(events[evtName])) {
        for (var j = 0; j < events[evtName].length; j++) {
          var e = events[evtName][j];
          elem.removeEventListener(evtName, e.listener);
        }
      }
    }
  }
  if (evtName === "nocontextmenu") {
    elem.oncontextmenu = null;
  } else if (evtName === "clickoutside" && document.removeEventListener) {
    htev.unregisterClickOutside(elem);
  } else {
    unregister(elem, evtName, fn);
  }
};

HTMLElement.prototype.on = function (evtName, fn, option) {
  var _this = this;

  var evts = evtName.split(" ");
  var cb = fn;

  var _loop = function _loop(i) {
    var evt = evts[i];
    if (_this.addEventListener) {
      if (option && option.once) {
        if (!!document.documentMode || specialEvents.indexOf(evtName) >= 0) {
          self = _this;

          fn.removed = false;

          _oneCall = function oneCall() {
            if (!fn.removed) {
              fn(event);
              fn.removed = true;
            }
            self.off(evt, _oneCall);
          };

          cb = _oneCall;
        }
      }
      htev.registerEvent(_this, evt, cb, option || false);
    } else if (_this.attachEvent) {
      _this.attachEvent("on" + evt, fn);
    }
  };

  for (var i = 0; i < evts.length; i++) {
    var self;

    var _oneCall;

    _loop(i);
  }
};

HTMLElement.prototype.off = function (evtNames, fn) {
  var evts = evtNames.split(" ");
  for (var i = 0; i < evts.length; i++) {
    var _evt = evts[i];
    if (this.removeEventListener) {
      htev.unregisterEvent(this, _evt, fn);
    } else if (this.detachEvent) {
      this.detachEvent("on" + _evt, fn);
    }
  }
};
window.ListenerTracker = new function () {
  var is_active = false;

  var _elements_ = [];
  var _listeners_ = [];
  this.init = function () {
    if (!is_active) {
      intercep_events_listeners();
    }
    is_active = true;
  };

  var register_element = function register_element(element) {
    if (_elements_.indexOf(element) == -1) {
      var elt_listeners = [{}, {}];
      _elements_.push(element);
      _listeners_.push(elt_listeners);
    }
    return _listeners_[_elements_.indexOf(element)];
  };
  var intercep_events_listeners = function intercep_events_listeners() {
    var _super_ = {
      "addEventListener": HTMLElement.prototype.addEventListener,
      "removeEventListener": HTMLElement.prototype.removeEventListener
    };

    Element.prototype["addEventListener"] = function (type, listener, useCapture) {
      var listeners = register_element(this);

      _super_["addEventListener"].apply(this, arguments);

      useCapture = useCapture ? 1 : 0;

      if (!listeners[useCapture][type]) listeners[useCapture][type] = [];
      listeners[useCapture][type].push(listener);
    };
    Element.prototype["removeEventListener"] = function (type, listener, useCapture) {
      var listeners = register_element(this);

      _super_["removeEventListener"].apply(this, arguments);

      useCapture = useCapture ? 1 : 0;
      if (!listeners[useCapture][type]) return;
      var lid = listeners[useCapture][type].indexOf(listener);
      if (lid > -1) listeners[useCapture][type].splice(lid, 1);
    };
    Element.prototype["getEventListeners"] = function (type) {
      var listeners = register_element(this);

      var result = [];
      for (var useCapture = 0, list; list = listeners[useCapture]; useCapture++) {
        if (typeof type == "string") {
          if (list[type]) {
            for (var id in list[type]) {
              result.push({ "type": type, "listener": list[type][id], "useCapture": !!useCapture });
            }
          }
        } else {
          for (var _type in list) {
            for (var id in list[_type]) {
              result.push({ "type": _type, "listener": list[_type][id], "useCapture": !!useCapture });
            }
          }
        }
      }
      return result;
    };
  };
}();
window.ListenerTracker.init();
if (typeof htev === "undefined") {
  var htev = {};
}

htev.registerLongMousedown = function (elem, fn, option) {
  var timer = 0;
  elem.on("mousedown", function (e) {
    var cb = function cb() {
      fn(e);
    };
    timer = window.setTimeout(cb, 500);
  });

  elem.on("mouseup", function () {
    window.clearTimeout(timer);
  });
};

htev.registerLongKeydown = function (elem, fn, option) {
  var timer = 0;
  elem.on("keydown", function (e) {
    var cb = function cb() {
      fn(e);
    };
    timer = window.setTimeout(cb, 500);
  });

  elem.on("keyup", function () {
    window.clearTimeout(timer);
  });
};

if (typeof htev === "undefined") {
  var htev = {};
}

htev.registerMulticlick = function (elem, fn, option) {
  var timer = 0;
  var counter = 0;

  function reset() {
    counter = 0;
  }
  elem.on("click", function (e) {
    if (counter >= 2) {
      fn(e);
      counter = 0;
    }
    counter++;
    timer = window.setTimeout(reset, 3000);
  });
};
function disableContextMenu(ev) {
  ev.stopImmediatePropagation();
  ev.cancelBubble = true;
  return false;
}

document.NoContextMenu = function () {
  document.oncontextmenu = disableContextMenu;
};

HTMLElement.prototype.NoContextMenu = function () {
  this.addEventListener("contextmenu", disableContextMenu);
};
NodeList.prototype.on = function (evtName, fn, option) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = this[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;

      item.on(evtName, fn, option);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

NodeList.prototype.off = function (evtName, fn) {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = this[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var item = _step2.value;

      item.off(evtName, fn);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
};
window.on = window.addEventListener;
document.on = document.addEventListener;
window.off = window.removeEventListener;
document.off = document.removeEventListener;

window.isDef = function (obj) {
  return obj !== null && typeof obj !== "undefined";
};
(function () {
  if (typeof window.CustomEvent === "function") {
    return false;
  }

  function CustomEvent(event, params) {
    params = params || { bubbles: false, cancelable: false, detail: undefined };
    var evt = document.createEvent("CustomEvent");
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return evt;
  }
  CustomEvent.prototype = window.Event.prototype;
  window.CustomEvent = CustomEvent;
})();

document.fireEvent = function (eventName, detail) {
  var myEvent = new CustomEvent(eventName, { detail: detail });
  document.dispatchEvent(myEvent);
};